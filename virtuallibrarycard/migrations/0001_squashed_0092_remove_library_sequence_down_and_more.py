# Generated by Django 4.2.7 on 2024-02-09 14:55
import logging

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import localflavor.us.models
from django.conf import settings
from django.db import migrations, models

import virtual_library_card.storage
import virtuallibrarycard.models
from virtuallibrarycard.business_rules.place_import import PlaceImport


def seed_places_ndjson(apps, schemaeditor):
    Place = apps.get_model("virtuallibrarycard", "Place")
    with open("static/ndjson/seed_places.ndjson") as fp:
        PlaceImport(Place).import_ndjson(fp)


def migrate_states_to_places(apps, schemaeditor):
    Place = apps.get_model("virtuallibrarycard", "Place")
    LibraryStates = apps.get_model("virtuallibrarycard", "LibraryStates")
    LibraryPlace = apps.get_model("virtuallibrarycard", "LibraryPlace")
    Library = apps.get_model("virtuallibrarycard", "Library")

    ls_associations = LibraryStates.objects.all()
    us_country = Place.objects.get(type="country", abbreviation="US")

    log = logging.getLogger(__name__)
    for ls in ls_associations:
        place = Place.objects.filter(abbreviation=ls.us_state).first()
        if not place:
            raise RuntimeError(f"Could not find '{ls.us_state}' in the places table")

        if LibraryPlace.objects.filter(library=ls.library, place=place).exists():
            continue

        # Save the new association
        LibraryPlace(library=ls.library, place=place).save()

    # Any library that allows all US states shoudl associate with the country
    for library in Library.objects.all():
        if library.allow_all_us_states:
            if not LibraryPlace.objects.filter(
                library=library, place=us_country
            ).exists():
                LibraryPlace(library=library, place=us_country).save()
            else:
                log.info(f"US country already associated with {library.name}")


def bb_places_ndjson(apps, schemaeditor):
    Place = apps.get_model("virtuallibrarycard", "Place")
    with open("static/ndjson/bb-places.ndjson") as fp:
        PlaceImport(Place).import_ndjson(fp)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="Library",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "card_validity_months",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "logo",
                    models.ImageField(
                        null=True,
                        storage=virtual_library_card.storage.OverwriteStorage(),
                        upload_to=virtuallibrarycard.models.Library.generate_filename,
                    ),
                ),
                ("name", models.CharField(max_length=255, null=True)),
                ("prefix", models.CharField(max_length=10, null=True)),
                ("email", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "identifier",
                    models.CharField(max_length=255, null=True, unique=True),
                ),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("terms_conditions_url", models.CharField(max_length=255)),
                (
                    "social_facebook",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "social_twitter",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("sequence_start_number", models.IntegerField(default=0)),
                (
                    "sequence_down",
                    models.BooleanField(
                        choices=[(True, "Descending"), (False, "Ascending")],
                        default=False,
                    ),
                ),
                ("sequence_end_number", models.IntegerField(blank=True, null=True)),
                (
                    "us_state",
                    localflavor.us.models.USStateField(
                        max_length=2, verbose_name="State"
                    ),
                ),
                (
                    "privacy_url",
                    models.CharField(
                        default="https://legal.palaceproject.io/Privacy%20Policy.html",
                        max_length=255,
                    ),
                ),
                ("patron_address_mandatory", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name_plural": "libraries",
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=50,
                        null=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=30, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("external_type", models.CharField(max_length=255, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                ("authorization_expires", models.DateField(null=True)),
                (
                    "authorization_identifier",
                    models.CharField(max_length=255, null=True),
                ),
                ("city", models.CharField(max_length=255, null=True)),
                ("permanent_id", models.CharField(max_length=255, null=True)),
                (
                    "street_address_line1",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Street address line 1"
                    ),
                ),
                (
                    "street_address_line2",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Street address line 2",
                    ),
                ),
                (
                    "zip",
                    localflavor.us.models.USZipCodeField(
                        default="0", max_length=10, verbose_name="Zip code"
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="virtuallibrarycard.library",
                    ),
                ),
                (
                    "us_state",
                    localflavor.us.models.USStateField(
                        max_length=2, verbose_name="State"
                    ),
                ),
                (
                    "country_code",
                    models.CharField(default="US", max_length=255, null=True),
                ),
                (
                    "over13",
                    models.BooleanField(
                        default=True,
                        verbose_name="    I certify that I am over 13 years old",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LibraryCard",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("expiration_date", models.DateTimeField(blank=True, null=True)),
                ("number", models.CharField(max_length=100, null=True)),
                (
                    "library",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="virtuallibrarycard.library",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="created"
                    ),
                ),
                (
                    "canceled_by_user",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("canceled_date", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="LibraryStates",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "us_state",
                    localflavor.us.models.USStateField(
                        max_length=2, verbose_name="State"
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="virtuallibrarycard.library",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="customuser",
            name="email_verified",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="library",
            name="barcode_text",
            field=models.CharField(
                default="barcode", max_length=255, verbose_name="Barcode Text"
            ),
        ),
        migrations.AddField(
            model_name="library",
            name="pin_text",
            field=models.CharField(
                default="pin", max_length=255, verbose_name="Pin Text"
            ),
        ),
        migrations.AlterField(
            model_name="librarystates",
            name="library",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="library_states",
                to="virtuallibrarycard.library",
            ),
        ),
        migrations.CreateModel(
            name="LibraryAllowedEmailDomains",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "domain",
                    virtuallibrarycard.models.LowerCharField(
                        max_length=100,
                        validators=[virtuallibrarycard.models.validate_domain],
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="library_email_domains",
                        to="virtuallibrarycard.library",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="libraryallowedemaildomains",
            constraint=models.UniqueConstraint(
                fields=("library", "domain"),
                name="virtuallibrarycard_library_domain_unique",
            ),
        ),
        migrations.AlterField(
            model_name="customuser",
            name="library",
            field=models.ForeignKey(
                default=virtuallibrarycard.models.default_library,
                on_delete=django.db.models.deletion.PROTECT,
                to="virtuallibrarycard.library",
            ),
        ),
        migrations.AlterField(
            model_name="customuser",
            name="zip",
            field=localflavor.us.models.USZipCodeField(
                max_length=10, null=True, verbose_name="Zip code"
            ),
        ),
        migrations.AddField(
            model_name="library",
            name="allow_all_us_states",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="library",
            name="age_verification_mandatory",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="library",
            name="bulk_upload_prefix",
            field=models.CharField(max_length=10, null=True),
        ),
        migrations.AddField(
            model_name="library",
            name="allow_bulk_card_uploads",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="librarycard",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("external_id", models.CharField(max_length=20, unique=True)),
                ("abbreviation", models.CharField(blank=True, max_length=5)),
                ("name", models.CharField(max_length=100)),
                ("type", models.CharField(max_length=20)),
                ("latitude", models.FloatField(null=True)),
                ("longitude", models.FloatField(null=True)),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="virtuallibrarycard.place",
                    ),
                ),
            ],
        ),
        migrations.RunPython(
            code=seed_places_ndjson,
        ),
        migrations.AddField(
            model_name="customuser",
            name="place",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="virtuallibrarycard.place",
            ),
        ),
        migrations.CreateModel(
            name="LibraryPlace",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="library_places",
                        to="virtuallibrarycard.library",
                    ),
                ),
                (
                    "place",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="place_libraries",
                        to="virtuallibrarycard.place",
                    ),
                ),
            ],
        ),
        migrations.RunPython(
            code=migrate_states_to_places,
        ),
        migrations.AlterField(
            model_name="customuser",
            name="us_state",
            field=localflavor.us.models.USStateField(max_length=2, null=True),
        ),
        migrations.AddConstraint(
            model_name="libraryplace",
            constraint=models.UniqueConstraint(
                fields=("library", "place"), name="unique_library_place"
            ),
        ),
        migrations.AlterField(
            model_name="library",
            name="logo",
            field=models.ImageField(
                null=True, upload_to=virtuallibrarycard.models.Library.generate_filename
            ),
        ),
        migrations.CreateModel(
            name="LibraryCustomization",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                (
                    "welcome_email_top_text",
                    models.TextField(blank=True, max_length=512, null=True),
                ),
                (
                    "welcome_email_bottom_text",
                    models.TextField(blank=True, max_length=512, null=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name="library",
            name="customization",
            field=models.ForeignKey(
                default=virtuallibrarycard.models.default_customization,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="library",
                to="virtuallibrarycard.librarycustomization",
            ),
        ),
        migrations.AlterField(
            model_name="customuser",
            name="zip",
            field=models.CharField(
                max_length=10,
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        "^([0-9A-Z]{3}(?: [A-Z0-9]{3})?)|(\\d{5}(?:-\\d{4})?)$",
                        message="Enter a zip code in the format [XXX or XXX XXX](Canada) or [XXXXX or XXXXX-XXXX](USA)",
                    )
                ],
            ),
        ),
        migrations.RemoveField(
            model_name="customuser",
            name="us_state",
        ),
        migrations.RemoveField(
            model_name="library",
            name="allow_all_us_states",
        ),
        migrations.RemoveField(
            model_name="library",
            name="us_state",
        ),
        migrations.DeleteModel(
            name="LibraryStates",
        ),
        migrations.RemoveField(
            model_name="place",
            name="latitude",
        ),
        migrations.RemoveField(
            model_name="place",
            name="longitude",
        ),
        migrations.AlterField(
            model_name="place",
            name="external_id",
            field=models.CharField(max_length=128, unique=True),
        ),
        migrations.RunPython(
            code=bb_places_ndjson,
        ),
        migrations.AlterField(
            model_name="library",
            name="customization",
            field=models.ForeignKey(
                default=virtuallibrarycard.models.default_customization,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="library",
                to="virtuallibrarycard.librarycustomization",
                unique=True,
            ),
        ),
        migrations.CreateModel(
            name="UserConsent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=virtuallibrarycard.models.default_timestamp
                    ),
                ),
                ("method", models.CharField(max_length=50)),
                ("type", models.CharField(max_length=50)),
                ("version", models.CharField(max_length=10)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="consents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="userconsent",
            constraint=models.UniqueConstraint(
                fields=("user", "type"), name="virtuallibrarycard_unique_type_user"
            ),
        ),
        migrations.AddField(
            model_name="library",
            name="has_survey_consent",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="library",
            name="uuid",
            field=models.CharField(blank=True, max_length=255, null=True, unique=True),
        ),
        migrations.RemoveField(
            model_name="library",
            name="sequence_down",
        ),
        migrations.RemoveField(
            model_name="library",
            name="sequence_end_number",
        ),
        migrations.RemoveField(
            model_name="library",
            name="sequence_start_number",
        ),
    ]
